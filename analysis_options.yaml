analyzer:
  strong-mode:
    implicit-casts: false
    implicit-dynamic: false

  errors:
    # treat missing required parameters as an error
    missing_required_param: error
    # treat missing returns as an error
    missing_return: error
    # allow having TODOs in the code
    todo: ignore

linter:
  rules:
    # Dart Style Guide
    - always_declare_return_types
    - always_require_non_null_named_parameters
    - annotate_overrides
    - avoid_empty_else
    - avoid_init_to_null
    - avoid_null_checks_in_equality_operators
    - avoid_relative_lib_imports
    - avoid_return_types_on_setters
    - avoid_shadowing_type_parameters
    - avoid_types_as_parameter_names
    - camel_case_extensions
    - camel_case_types
    - empty_catches
    - empty_constructor_bodies
    - library_names
    - library_prefixes
    - non_constant_identifier_names
    - prefer_const_constructors
    - prefer_final_fields
    - prefer_final_locals
    - prefer_single_quotes
    - sort_constructors_first
    - sort_pub_dependencies
    - type_init_formals
    - unnecessary_brace_in_string_interps
    - unnecessary_const
    - unnecessary_new
    - unnecessary_null_in_if_null_operators
    - unnecessary_this
    - use_key_in_widget_constructors

    # Error Rules
    - avoid_print
    - avoid_relative_lib_imports
    - avoid_returning_null
    - avoid_types_as_parameter_names
    - cancel_subscriptions
    - close_sinks
    - comment_references
    - control_flow_in_finally
    - empty_statements
    - hash_and_equals
    - invariant_booleans
    - iterable_contains_unrelated_type
    - list_remove_unrelated_type
    - literal_only_boolean_expressions
    - no_adjacent_strings_in_list
    - no_duplicate_case_values
    - prefer_void_to_null
    - test_types_in_equals
    - throw_in_finally
    - unnecessary_statements
    - unrelated_type_equality_checks
    - use_rethrow_when_possible
    - valid_regexps

    # Style Rules
    - always_put_control_body_on_new_line
    - always_specify_types
    - avoid_annotating_with_dynamic
    - avoid_bool_literals_in_conditional_expressions
    - avoid_catches_without_on_clauses
    - avoid_catching_errors
    - avoid_classes_with_only_static_members
    - avoid_double_and_int_checks
    - avoid_field_initializers_in_const_classes
    - avoid_function_literals_in_foreach_calls
    - avoid_implementing_value_types
    - avoid_js_rounded_ints
    - avoid_positional_boolean_parameters
    - avoid_private_typedef_functions
    - avoid_redundant_argument_values
    - avoid_returning_this
    - avoid_setters_without_getters
    - avoid_slow_async_io
    - avoid_unnecessary_containers
    - avoid_unused_constructor_parameters
    - avoid_void_async
    - cascade_invocations
    - cast_nullable_to_non_nullable
    - conditional_uri_does_not_exist
    - deprecated_consistency
    - directives_ordering
    - do_not_use_environment
    - join_return_with_assignment
    - leading_newlines_in_multiline_strings
    - lines_longer_than_80_chars
    - missing_whitespace_between_adjacent_strings
    - no_runtimeType_toString
    - null_closures
    - omit_local_variable_types
    - one_member_abstracts
    - only_throw_errors
    - package_api_docs
    - parameter_assignments
    - prefer_asserts_in_body
    - prefer_asserts_with_message
    - prefer_constructors_over_static_methods
    - prefer_expression_function_bodies
    - prefer_if_elements_to_conditional_expressions
    - prefer_interpolation_to_compose_strings
    - prefer_mixin
    - prefer_null_aware_method_calls
    - prefer_null_aware_operators
    - prefer_relative_imports
    - prefer_typing_uninitialized_variables
    - provide_deprecation_message
    - sort_child_properties_last
    - sort_unnamed_constructors_first
    - type_annotate_public_apis
    - unawaited_futures
    - unnecessary_await_in_return
    - unnecessary_lambdas
    - unnecessary_overrides
    - unnecessary_parenthesis
    - unnecessary_raw_strings
    - use_full_hex_values_for_flutter_colors
    - use_if_null_to_convert_nulls_to_bools
    - use_is_even_rather_than_modulo
    - use_late_for_private_fields_and_variables
    - use_named_constants
    - use_raw_strings
    - use_setters_to_change_properties
    - use_string_buffers
    - use_to_and_as_if_applicable
